<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Support\Facades\DB;

class CreateTaxvalueFunctions extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        DB::unprepared("
CREATE FUNCTION `TAXVALUE`(
	`V_TAXCODE` CHAR(15),
	`V_QTY` DECIMAL(30,10),
	`V_AMOUNT` DECIMAL(30,10),
	`V_MRP` DECIMAL(30,10)
)
RETURNS decimal(30,10)
BEGIN
DECLARE V_DONE INT DEFAULT FALSE;
DECLARE V_CODE CHAR(15);
DECLARE V_AMOUNT_DECIMAL DECIMAL;
DECLARE V_TAXAMOUNT DECIMAL(30,10);
DECLARE V_TOTALTAXAMOUNT DECIMAL(30,10);
DECLARE V_PERCENTAGE DECIMAL(5,2);
DECLARE V_PERCENTAGEEQUATION VARCHAR(200);
DECLARE V_TAXRULEAMOUNT DECIMAL(30,10);
DECLARE V_TAXTYPE ENUM ('TaxOnTaxableAmount','TaxOnMRP','TaxOnTotalAmount','TaxOnTax','TaxOnTotalTax','TaxOnQuantity','FixedTax');
DECLARE V_INPUTCODE CHAR(15);
DECLARE V_OUTPUTCODE CHAR(15);
DECLARE V_REFTAXCODE CHAR(15);
DECLARE V_TAXNATURE ENUM('Tax','SubTax','AdditionalTax');
DECLARE TAXCURSOR CURSOR FOR SELECT code,percentage,percentageequation,amount,taxtype,taxnature,inputcode,outputcode,reftaxcode
	FROM tax_details
	WHERE taxcode = V_TAXCODE AND (amount<>0 OR percentage<>0 OR IFNULL(percentageequation,'') <>'')
	ORDER BY processorder;
DECLARE CONTINUE HANDLER FOR NOT FOUND SET V_DONE = TRUE;
	DROP TEMPORARY TABLE IF EXISTS TAXTABLE ;
	CREATE TEMPORARY TABLE TAXTABLE(
	TAXCODE CHAR(15) NOT NULL,
	CODE CHAR(15) NOT NULL,
	INPUTCODE CHAR(15) NOT NULL,
	OUTPUTCODE CHAR(15) NOT NULL,
   TAXNATURE ENUM('Tax','SubTax','AdditionalTax') NOT NULL DEFAULT 'Tax',
   AMOUNT DECIMAL(30,10),
	PRIMARY KEY (TAXCODE,CODE)
	)  COMMENT='Temporary Tax Table';
	SELECT AMOUNT_DECIMAL INTO V_AMOUNT_DECIMAL FROM setup WHERE CODE='01';
	SET V_TAXAMOUNT =0;
   SET V_TOTALTAXAMOUNT = 0;
	OPEN TAXCURSOR;
	REPEAT
	FETCH TAXCURSOR INTO V_CODE,V_PERCENTAGE,V_PERCENTAGEEQUATION,V_TAXRULEAMOUNT,V_TAXTYPE,V_TAXNATURE,V_INPUTCODE,V_OUTPUTCODE,V_REFTAXCODE ;
	IF NOT V_DONE THEN
		IF V_TAXTYPE='TaxOnTaxableAmount' THEN
			IF V_PERCENTAGEEQUATION <>'' THEN
				SET V_PERCENTAGE= GETTAXPERCENTAGE(V_PERCENTAGEEQUATION,V_AMOUNT);
			END IF;
			SET V_TAXAMOUNT = ROUND(V_AMOUNT*V_PERCENTAGE*0.01,V_AMOUNT_DECIMAL);
		ELSEIF V_TAXTYPE='TaxOnTax' THEN
			SELECT AMOUNT INTO V_TAXAMOUNT FROM TAXTABLE WHERE TAXCODE = V_TAXCODE AND CODE = V_REFTAXCODE;
			SET V_TAXAMOUNT = ROUND(V_TAXAMOUNT*V_PERCENTAGE*0.01,V_AMOUNT_DECIMAL);
		ELSEIF V_TAXTYPE='TaxOnTotalAmount' THEN
			SET V_TAXAMOUNT = ROUND((V_AMOUNT+V_TOTALTAXAMOUNT)*V_PERCENTAGE*0.01,V_AMOUNT_DECIMAL);
		ELSEIF V_TAXTYPE='TaxOnTotalTax' THEN
			SET V_TAXAMOUNT = ROUND(V_TOTALTAXAMOUNT*V_PERCENTAGE*0.01,V_AMOUNT_DECIMAL);
      ELSEIF V_TAXTYPE='TaxOnMRP' THEN
			IF V_PERCENTAGEEQUATION <>'' THEN
				SET V_PERCENTAGE= GETTAXPERCENTAGE(V_PERCENTAGEEQUATION,V_MRP);
			END IF;
			SET V_TAXAMOUNT = ROUND(V_MRP*V_PERCENTAGE*0.01,V_AMOUNT_DECIMAL);
		ELSEIF V_TAXTYPE='TaxOnQuantity' THEN
			SET V_TAXAMOUNT = ROUND(V_QTY*V_TAXRULEAMOUNT,V_AMOUNT_DECIMAL);
		ELSE
			SET V_TAXAMOUNT = ROUND(V_AMOUNT,V_AMOUNT_DECIMAL);
		END IF;
		INSERT INTO TAXTABLE (TAXCODE,CODE,INPUTCODE,OUTPUTCODE,TAXNATURE,AMOUNT)
			VALUES (V_TAXCODE,V_CODE,V_INPUTCODE,V_OUTPUTCODE,V_TAXNATURE,V_TAXAMOUNT);
		SET V_TOTALTAXAMOUNT = V_TOTALTAXAMOUNT + V_TAXAMOUNT;
	END IF;
	UNTIL V_DONE END REPEAT;
	CLOSE TAXCURSOR;
	SELECT SUM(AMOUNT) INTO V_TAXAMOUNT FROM TAXTABLE;
   RETURN V_TAXAMOUNT;
END
        ");

        DB::unprepared("
CREATE FUNCTION `TAXCODE`(
	`V_CODE` CHAR(30)
)
RETURNS char(15) CHARSET utf8
BEGIN
DECLARE V_TAXRULE CHAR(15);
	SELECT tax1 INTO V_TAXRULE FROM productgroup G,products P
		WHERE P.group1 = G.id AND P.code = V_CODE;
    RETURN V_TAXRULE;
END
        ");

        DB::unprepared("
CREATE FUNCTION `GETTAXPERCENTAGE`(
	`V_PERCENTAGEEQUATION` VARCHAR(200),
	`V_AMOUNT` DECIMAL(24,4)
)
RETURNS VARCHAR(200) CHARSET utf8
BEGIN
DECLARE V_PERCENTAGE DECIMAL(5,2);
DECLARE V_STPOS INT;
DECLARE V_ENPOS INT;
DECLARE V_STATEMENT VARCHAR(200);
DECLARE V_PART1 VARCHAR(200);
DECLARE V_PART2 VARCHAR(200);
DECLARE V_PART3 VARCHAR(200);
DECLARE V_PART11 VARCHAR(200);
DECLARE V_PART12 VARCHAR(200);
DECLARE V_SYMB CHAR(2);
	SET V_PERCENTAGE = 0;
	SET V_STPOS= LOCATE('IF(',V_PERCENTAGEEQUATION);
	IF V_STPOS = 0 THEN
		RETURN V_PERCENTAGE;
	END IF;
    SET V_PERCENTAGEEQUATION = SUBSTRING(V_PERCENTAGEEQUATION,3+V_STPOS);
    SET V_ENPOS= LOCATE(',',V_PERCENTAGEEQUATION);
    SET V_PART1 = SUBSTRING(V_PERCENTAGEEQUATION,1,V_ENPOS - 1);
    SET V_PERCENTAGEEQUATION = SUBSTRING(V_PERCENTAGEEQUATION,V_ENPOS + 1);
    SET V_ENPOS= LOCATE(',',V_PERCENTAGEEQUATION);
    SET V_PART2 = SUBSTRING(V_PERCENTAGEEQUATION,1,V_ENPOS - 1);
    SET V_PERCENTAGEEQUATION = SUBSTRING(V_PERCENTAGEEQUATION,V_ENPOS + 1);
    SET V_ENPOS= LOCATE(')',V_PERCENTAGEEQUATION);
    SET V_PART3 = SUBSTRING(V_PERCENTAGEEQUATION,1,V_ENPOS - 1);
    SET V_SYMB = '';
    SET V_STPOS= LOCATE('>=',V_PART1);
    IF V_STPOS = 0 THEN
		SET V_STPOS= LOCATE('<=',V_PART1);
    ELSE
		SET V_SYMB = '>=';
	END IF;
	IF V_SYMB = ''  THEN
		IF V_STPOS = 0 THEN
			SET V_STPOS= LOCATE('<>',V_PART1);
		ELSE
			SET V_SYMB = '<=';
		END IF;
	END IF;
    IF V_SYMB = ''  THEN
		IF V_STPOS = 0 THEN
			SET V_STPOS= LOCATE('=',V_PART1);
		ELSE
			SET V_SYMB = '<>';
		END IF;
	END IF;
    IF V_SYMB = ''  THEN
		IF V_STPOS = 0 THEN
			SET V_STPOS= LOCATE('>',V_PART1);
		ELSE
			SET V_SYMB = '=';
		END IF;
	END IF;
    IF V_SYMB = ''  THEN
		IF V_STPOS = 0 THEN
			SET V_STPOS= LOCATE('<',V_PART1);
		ELSE
			SET V_SYMB = '>';
		END IF;
	END IF;
    IF V_SYMB = ''  THEN
		IF V_STPOS <> 0 THEN
			SET V_SYMB = '<';
		END IF;
	END IF;
    SET V_PART11 = SUBSTRING(V_PART1,1,V_STPOS - 1);
    SET V_PART12 = SUBSTRING(V_PART1,V_STPOS + 1);
    SET V_PART11 = REPLACE(V_PART11,'[VAL]',V_AMOUNT);
    SET V_PART11 = REPLACE(V_PART11,'%','*0.01');
    SET V_PART12 = REPLACE(V_PART12,'[VAL]',V_AMOUNT);
    SET V_PART12 = REPLACE(V_PART12,'%','*0.01');
    CASE V_SYMB
		WHEN '=' THEN
		IF GETDECIMALRESULT(V_PART11) =  GETDECIMALRESULT(V_PART12) THEN
			RETURN V_PART2;
		ELSE
			RETURN V_PART3;
		END IF;
        WHEN '<' THEN
		IF GETDECIMALRESULT(V_PART11) <  GETDECIMALRESULT(V_PART12) THEN
			RETURN V_PART2;
		ELSE
			RETURN V_PART3;
		END IF;
        WHEN '>' THEN
		IF GETDECIMALRESULT(V_PART11) >  GETDECIMALRESULT(V_PART12) THEN
			RETURN V_PART2;
		ELSE
			RETURN V_PART3;
		END IF;
        WHEN '<=' THEN
        SET V_PART12 = SUBSTRING(V_PART12,2);
		IF GETDECIMALRESULT(V_PART11) >  GETDECIMALRESULT(V_PART12) THEN
			RETURN V_PART2;
		ELSE
			RETURN V_PART3;
		END IF;
        WHEN '>=' THEN
        SET V_PART12 = SUBSTRING(V_PART12,2);
		IF GETDECIMALRESULT(V_PART11) >=  GETDECIMALRESULT(V_PART12) THEN
			RETURN V_PART2;
		ELSE
			RETURN V_PART3;
		END IF;
        WHEN '<>' THEN
        SET V_PART12 = SUBSTRING(V_PART12,2);
		IF GETDECIMALRESULT(V_PART11) <> GETDECIMALRESULT(V_PART12) THEN
			RETURN V_PART2;
		ELSE
			RETURN V_PART3;
		END IF;
	END CASE;
    RETURN 0;
END
        ");

        DB::unprepared("
CREATE FUNCTION `GETDECIMALRESULT`(
	`V_STRING` VARCHAR(200)
)
RETURNS decimal(24,4)
BEGIN
DECLARE V_OPERATOR VARCHAR(30);
DECLARE V_NEXTOPERATOR VARCHAR(30);
DECLARE V_OPINDEX INT;
DECLARE V_CHAR CHAR(1);
DECLARE V_DECIMALVAL DECIMAL(24,4);
DECLARE V_RESULT DECIMAL(24,4);
DECLARE V_POS INT;
	SET V_RESULT = 1;
    SET V_NEXTOPERATOR = '*';
	WHILE V_STRING<>'' DO
		SET V_OPERATOR = V_NEXTOPERATOR;
		SET V_POS = 1;
        LABEL1: LOOP
			IF V_POS <= LENGTH(V_STRING) THEN
				SET V_CHAR = SUBSTRING(V_STRING,V_POS,1);
				IF V_CHAR = '+' OR V_CHAR = '-' OR V_CHAR = '*' OR V_CHAR = '/' THEN
					SET V_NEXTOPERATOR = SUBSTRING(V_STRING,V_POS,1);
                    LEAVE LABEL1;
				END IF;
				SET V_POS = V_POS + 1;
				ITERATE LABEL1;
			END IF;
			LEAVE LABEL1;
		END LOOP LABEL1;
        SET V_OPINDEX = V_POS ;
        IF V_OPINDEX<>0 THEN
			SET V_DECIMALVAL=SUBSTRING(V_STRING,1,V_OPINDEX -1 ) ;
            SET V_STRING=SUBSTRING(V_STRING,V_OPINDEX + 1) ;
		ELSE
			SET V_DECIMALVAL=V_STRING;
			SET V_STRING='';
        END IF;
        CASE V_OPERATOR
			WHEN '+' THEN
				SET V_RESULT = V_RESULT+V_DECIMALVAL;
			WHEN '-' THEN
				SET V_RESULT = V_RESULT - V_DECIMALVAL ;
			WHEN '*' THEN
				SET V_RESULT = V_RESULT*V_DECIMALVAL;
			WHEN '/' THEN
				SET V_RESULT = V_RESULT / V_DECIMALVAL ;
			ELSE
				SET V_RESULT = V_RESULT*V_DECIMALVAL;
		END CASE;
	END WHILE;
	RETURN V_RESULT;
END
        ");
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        DB::unprepared('DROP FUNCTION `TAXVALUE`');
        DB::unprepared('DROP FUNCTION `TAXCODE`');
        DB::unprepared('DROP FUNCTION `GETTAXPERCENTAGE`');
        DB::unprepared('DROP FUNCTION `GETDECIMALRESULT`');
    }
}
